---
- hosts: all
  become: yes
  vars:
    default_container_name: XXX
    default_container_image: XXX
  tasks:
  
  - name: create user and add to sudoers
    user:
      name: marnix
      group: sudo
      password: XXX
      append: yes

  - name: set sudo group to nopasswd
    lineinfile:
      path: '/etc/sudoers'
      regexp: '^%sudo\s'
      line: '%sudo ALL=(ALL:ALL) NOPASSWD: ALL'

  - name: no password authentication
    lineinfile:
      path: '/etc/ssh/sshd_config'
      regexp: 'PasswordAuthentication\s'
      line: 'PasswordAuthentication no'

  - name: allow pubkeyauth
    lineinfile:
      path: '/etc/ssh/sshd_config'
      regexp: 'PubkeyAuthentication'
      line: 'PubkeyAuthentication yes'

  - name: deny root login
    lineinfile:
      path: '/etc/ssh/sshd_config'
      regexp: 'PermitRootLogin'
      line: 'PermitRootLogin no'

  - name: deny empty passwords
    lineinfile:
      path: '/etc/ssh/sshd_config'
      regexp: 'PermitEmptyPasswords'
      line: 'PermitEmptyPasswords no'

  - name: Specificy authorized_keys file
    lineinfile:
      path: '/etc/ssh/sshd_config'
      regexp: 'AuthorizedKeysFile'
      line: 'AuthorizedKeysFile .ssh/authorized_keys'
  
  - name: Install aptitude using apt
    apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

  - name: Install required system packages
    apt: name={{ item }} state=latest update_cache=yes
    loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'python-pip', 'virtualenv', 'python3-setuptools', 'python-setuptools']

  - name: Add Docker GPG apt Key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add Docker Repository
    apt_repository:
      repo: deb https://download.docker.com/linux/ubuntu bionic stable
      state: present

  - name: Update apt and install docker-ce
    apt: update_cache=yes name=docker-ce state=latest

  - name: Install Docker Module for Python
    pip:
      name: docker
  
  - name: Install Docker Compose
    pip:
      name: docker-compose

  - name: Login to Docker registry
    docker_login:
      registry: XXX
      username: XXX
      password: XXX

    # Pull image specified by variable default_image from the Docker Hub
  - name: Pull default Docker image
    docker_image:
      name: "{{ default_container_image }}"
      source: pull

  - name: Kill container if it exists
    docker_container:
      name: "{{ default_container_name }}"
      state: absent

    # Creates the number of containers defined by the variable create_containers, using default values
  - name: Create default containers
    docker_container:
      name: "{{ default_container_name }}"
      image: "{{ default_container_image }}"
      state: started
      ports: 80:80
